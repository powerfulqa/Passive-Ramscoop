name: Release Package

on:
  push:
    tags:
      - 'v*' # Trigger on any tag starting with 'v'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for creating releases
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Validate release files
        run: |
          # Check that essential mod files exist
          for file in "mod_info.json" "settings.json" "README.md" "LICENSE.txt"; do
            if [ ! -f "$file" ]; then
              echo "Error: $file is missing"
              exit 1
            fi
          done
          
          # Verify JAR exists
          if [ ! -f "jars/Ramscoop.jar" ]; then
            echo "Error: Ramscoop.jar is missing"
            exit 1
          fi

      - name: Generate changelog.txt from CHANGELOG.md
        run: |
          # Convert CHANGELOG.md to plain text format for end users
          # Remove markdown formatting and keep the content user-friendly
          sed 's/^## Version /Version /g' CHANGELOG.md | \
          sed 's/^# .*//g' | \
          sed 's/^- /- /g' | \
          sed '/^$/N;/^\n$/d' > changelog.txt
          
          echo "Generated changelog.txt:"
          cat changelog.txt

      - name: Run version consistency check
        shell: pwsh
        run: |
          pwsh -NoProfile -File .github/scripts/check-versions.ps1

      - name: Determine semver from tag
        run: |
          VERSION=${GITHUB_REF#refs/tags/}     # e.g. v0.7.1
          # Strip leading 'v' if present to make semantic version e.g. 0.7.1
          SEMVER=${VERSION#v}
          echo "SEMVER=$SEMVER" >> $GITHUB_ENV

      - name: Auto-fix version files from tag
        # This step contains bash-style logic (if ! git ...); run it under bash so the syntax is interpreted correctly
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pwsh -NoProfile -File .github/scripts/check-versions.ps1 -Fix -Version $SEMVER
          # If files changed, commit and push them so packaging uses the updated files
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add mod_info.json version.json Ramscoop.version || true
          if ! git diff --cached --quiet; then
            git commit -m "ci(release): auto-bump versions to $SEMVER [ci skip]"
            git push origin HEAD:main
          else
            echo "No version file changes required"
          fi

      - name: Update version files for release
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          
          # Update the directDownloadURL in Ramscoop.version to point to this specific release
          sed -i "s|\"directDownloadURL\": \".*\"|\"directDownloadURL\": \"https://github.com/powerfulqa/Passive-Ramscoop/releases/download/${VERSION}/Ramscoop-${VERSION}.zip\"|" Ramscoop.version
          
          echo "Updated Ramscoop.version:"
          cat Ramscoop.version

      - name: Create Release Package
        run: |
          # Create release directory with mod folder structure
          mkdir -p release/Ramscoop
          
          # Copy only the required files for users into the Ramscoop folder
          cp -r jars release/Ramscoop/
          cp -r data release/Ramscoop/ 2>/dev/null || :
          cp mod_info.json release/Ramscoop/
          cp settings.json release/Ramscoop/
          cp README.md release/Ramscoop/
          cp LICENSE.txt release/Ramscoop/
          cp changelog.txt release/Ramscoop/ 2>/dev/null || :
          cp Ramscoop.version release/Ramscoop/ 2>/dev/null || :
          
          # Determine version from tag
          VERSION=${GITHUB_REF#refs/tags/}
          
          # Create the zip file with the Ramscoop folder inside
          cd release
          zip -r "../Ramscoop-${VERSION}.zip" Ramscoop/
          cd ..

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: Ramscoop ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: Ramscoop-${{ github.ref_name }}.zip
          body: |
            # Ramscoop ${{ github.ref_name }}
            
            See the [changelog](https://github.com/${{ github.repository }}/blob/${{ github.ref_name }}/CHANGELOG.md) for details.
            
            ## Installation
            
            Extract the zip file into your Starsector/mods directory.
        # Token is automatically used from the GITHUB_TOKEN provided by Actions
